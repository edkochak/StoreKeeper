import asyncio
import io
import pytz
import logging

if __name__ == "__main__":
    import sys
    sys.path.append("./")  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
from aiogram.types import BufferedInputFile
from app.core.config import ADMIN_CHAT_IDS
from app.core.database import get_session
from app.services.revenue_service import RevenueService
from app.services.user_service import UserService
from app.utils.matryoshka import create_matryoshka_collection
from pathlib import Path
import os

logger = logging.getLogger(__name__)


async def send_daily_report(bot: Bot):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:

        resources_dir = Path(__file__).parent.parent.parent / "resources"
        resources_dir.mkdir(exist_ok=True)
        template_path = str(resources_dir / "bear3.glb")

        if not os.path.exists(template_path):
            from PIL import Image, ImageDraw

            img = Image.new("RGBA", (300, 500), (255, 255, 255, 0))
            draw = ImageDraw.Draw(img)

            draw.ellipse((50, 100, 250, 450), outline=(0, 0, 0), width=3)
            img.save(template_path)

        async with get_session() as session:
            rev_svc = RevenueService(session)
            excel_bytes, images = await rev_svc.export_report()

            shops_data = await rev_svc.get_matryoshka_data()
            shops_data.sort(key=lambda x: x["fill_percent"], reverse=True)

            user_svc = UserService(session)
            all_users = await user_svc.get_all_users()

            recipients_info = {}

            for chat_id in ADMIN_CHAT_IDS:
                recipients_info[chat_id] = {
                    "role": "config_admin",
                    "name": f"Config Admin {chat_id }",
                }

            for u in all_users:
                if u.chat_id:
                    if u.role == "admin":
                        recipients_info[u.chat_id] = {
                            "role": "db_admin",
                            "name": f"{u .first_name } {u .last_name }",
                        }
                    elif u.role == "subscriber":
                        recipients_info[u.chat_id] = {
                            "role": "subscriber",
                            "name": f"{u .first_name } {u .last_name }",
                        }

        if not shops_data:
            logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
            return

        matryoshka_buffers = create_matryoshka_collection(
            template_path, shops_data, layout="vertical", max_per_image=2
        )

        config_admins = sum(
            1 for info in recipients_info.values() if info["role"] == "config_admin"
        )
        db_admins = sum(
            1 for info in recipients_info.values() if info["role"] == "db_admin"
        )
        subscribers = sum(
            1 for info in recipients_info.values() if info["role"] == "subscriber"
        )

        logger.info(
            f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞. –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: "
            f"–∞–¥–º–∏–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {config_admins }, –∞–¥–º–∏–Ω—ã –∏–∑ –ë–î: {db_admins }, –ø–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers }"
        )

        successful_sends = 0
        failed_sends = 0

        for chat_id in sorted(recipients_info.keys()):
            recipient_info = recipients_info[chat_id]
            role = recipient_info["role"]
            name = recipient_info["name"]

            try:
                await bot.send_document(
                    chat_id,
                    BufferedInputFile(excel_bytes, filename="revenue_report.xlsx"),
                    caption="–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤",
                )

                for i, matryoshka_buf in enumerate(matryoshka_buffers, 1):
                    stores_in_image = shops_data[(i - 1) * 2 : i * 2]
                    stores_names = ", ".join([s["title"] for s in stores_in_image])

                    await bot.send_photo(
                        chat_id,
                        BufferedInputFile(
                            matryoshka_buf.getvalue(),
                            filename=f"report_matryoshka_{i }.png",
                        ),
                        caption=f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {stores_names }",
                    )

                logger.info(
                    f"‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {name } (—Ä–æ–ª—å: {role }, chat_id: {chat_id })"
                )
                successful_sends += 1

            except Exception as send_error:
                logger.error(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {name } (—Ä–æ–ª—å: {role }, chat_id: {chat_id }): {send_error }"
                )
                failed_sends += 1

        logger.info(
            f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful_sends }, —Å –æ—à–∏–±–∫–∞–º–∏: {failed_sends }"
        )

    except Exception as e:
        logger.error(
            f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str (e )}"
        )

        error_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str (e )}"
        for chat_id in ADMIN_CHAT_IDS:
            try:
                await bot.send_message(chat_id, error_message)
                logger.info(
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {chat_id }"
                )
            except Exception as notify_error:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {chat_id }: {notify_error }"
                )
                print(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {chat_id }: {error_message }"
                )


def schedule_daily_report(
    bot: Bot, hour: int = 22, minute: int = 30, second: int = None
) -> AsyncIOScheduler:
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á–µ—Ç–∞ –≤ 22:30 –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ú–°–ö"""
    scheduler = AsyncIOScheduler()

    tz = pytz.timezone("Europe/Moscow")
    trigger_args = {"timezone": tz}
    if second is not None:
        trigger_args["second"] = second
        logger.info(
            f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É {second } (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)"
        )
    else:
        trigger_args.update({"hour": hour, "minute": minute})
        logger.info(
            f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ {hour :02d}:{minute :02d} –ú–°–ö"
        )

    trigger = CronTrigger(**trigger_args)

    scheduler.add_job(send_daily_report, trigger=trigger, args=[bot])
    try:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    except RuntimeError as e:
        logger.warning(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω: {e }")
        pass
    return scheduler


if __name__ == "__main__":
    import app.core.config as config

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )

    bot = Bot(token=config.BOT_TOKEN)

    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    loop = asyncio.get_event_loop()
    loop.run_until_complete(send_daily_report(bot))
    loop.close()
    logger.info("–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
