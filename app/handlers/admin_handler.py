from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from app.core.config import ADMIN_CHAT_IDS
from app.core.states import (
    AssignStates,
    CreateStoreStates,
    CreateManagerStates,
    EditStoreStates,
    EditManagerStates,
    EditRevenueStates,
)
from app.core.database import get_session
from app.services.store_service import StoreService
from app.services.user_service import UserService
from app.services.revenue_service import RevenueService
from app.utils.menu import get_main_keyboard
from app.utils.matryoshka import create_matryoshka_collection
import logging
import os
from pathlib import Path

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("report"))
async def cmd_report(message: types.Message, state: FSMContext):
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    await state.clear()

    msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –æ—Ç—á–µ—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    resources_dir = Path(__file__).parent.parent.parent / "resources"
    resources_dir.mkdir(exist_ok=True)
    template_path = str(resources_dir / "matryoshka_template.png")
    print(template_path)

    if not os.path.exists(template_path):
        logger.warning(
            f"–®–∞–±–ª–æ–Ω –º–∞—Ç—Ä–µ—à–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {template_path }, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω"
        )
        from PIL import Image, ImageDraw

        img = Image.new("RGBA", (300, 500), (255, 255, 255, 0))
        draw = ImageDraw.Draw(img)

        draw.ellipse((50, 100, 250, 450), outline=(0, 0, 0), width=3)
        img.save(template_path)

    async with get_session() as session:
        service = RevenueService(session)

        excel_bytes, _ = await service.export_report()

        shops_data = await service.get_matryoshka_data()

        shops_data.sort(key=lambda x: x["fill_percent"], reverse=True)

    if not shops_data:
        await msg.delete()
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.")
        return

    matryoshka_buffers = create_matryoshka_collection(
        template_path, shops_data, layout="vertical", max_per_image=2
    )

    await message.answer_document(
        types.BufferedInputFile(excel_bytes, filename="revenue_report.xlsx"),
        caption="–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—ã—Ä—É—á–∫–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤",
    )

    for i, matryoshka_buf in enumerate(matryoshka_buffers, 1):

        stores_in_image = shops_data[(i - 1) * 2 : i * 2]
        stores_names = ", ".join([s["title"] for s in stores_in_image])

        await message.answer_photo(
            types.BufferedInputFile(
                matryoshka_buf.getvalue(), filename=f"report_matryoshka_{i }.png"
            ),
            caption=f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞: {stores_names }",
        )

    await msg.delete()


@router.message(Command("assign"))
async def cmd_assign_manager(message: types.Message, state: FSMContext):
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É"""
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    await state.clear()

    async with get_session() as session:
        user_service = UserService(session)
        users = await user_service.get_all_users()

        managers = [u for u in users if u.role == "manager"]

        if not managers:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω–∞–º.")
            return

        kb = ReplyKeyboardBuilder()
        for manager in managers:
            kb.button(text=f"{manager .first_name } {manager .last_name }")
        kb.adjust(1)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É:",
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
        await state.set_state(AssignStates.waiting_manager)


@router.message(AssignStates.waiting_manager)
async def process_manager_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await state.update_data(selected_manager=message.text)

    async with get_session() as session:
        stores = await StoreService(session).list_stores()

        if not stores:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.")
            await state.clear()
            return

        kb = ReplyKeyboardBuilder()
        for store in stores:
            kb.button(text=store.name)
        kb.adjust(2)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:",
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
        await state.set_state(AssignStates.waiting_store)


@router.message(AssignStates.waiting_store)
async def process_store_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    data = await state.get_data()
    manager_name = data.get("selected_manager", "")
    store_name = message.text

    parts = manager_name.split()
    if len(parts) < 2:
        await message.answer("–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    first_name, last_name = parts[0], " ".join(parts[1:])

    async with get_session() as session:

        user_service = UserService(session)
        manager = await user_service.get_by_name(first_name, last_name)

        if not manager:
            await message.answer(
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä {first_name } {last_name } –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
            )
            await state.clear()
            return

        store_service = StoreService(session)
        store = await store_service.get_or_create(store_name)

        await user_service.assign_store(manager, store.id)

        logger.info(
            "–ú–µ–Ω–µ–¥–∂–µ—Ä %s %s –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–∞–≥–∞–∑–∏–Ω—É %s", first_name, last_name, store_name
        )

        await message.answer(
            f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {first_name } {last_name } —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–∞–≥–∞–∑–∏–Ω—É {store_name }.",
            reply_markup=get_main_keyboard("admin"),
        )
        await state.clear()


@router.message(Command("users"))
async def cmd_list_users(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    async with get_session() as session:
        user_service = UserService(session)
        users = await user_service.get_all_users()

        if not users:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return

        result = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"

        for user in users:
            store_info = (
                f", –º–∞–≥–∞–∑–∏–Ω: {user .store .name }"
                if user.store and user.store.name
                else "–±–µ–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
            )
            result += f"‚Ä¢ {user .first_name } {user .last_name } ({user .role }){store_info }\n"

        await message.answer(result, parse_mode="HTML")


@router.message(Command("stores"))
async def cmd_list_stores(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    async with get_session() as session:
        store_service = StoreService(session)
        stores = await store_service.list_stores()

        if not stores:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
            return

        result = "üè™ <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"

        for store in stores:
            managers = (
                ", ".join([f"{m .first_name } {m .last_name }" for m in store.managers])
                if store.managers
                else "–Ω–µ—Ç"
            )
            result += f"‚Ä¢ <b>{store .name }</b> (–ø–ª–∞–Ω: {store .plan })\n  –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: {managers }\n\n"

        await message.answer(result, parse_mode="HTML")


@router.message(Command("addstore"))
async def cmd_add_store(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""

    await state.clear()
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(CreateStoreStates.waiting_name)


@router.message(CreateStoreStates.waiting_name)
async def process_store_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    store_name = message.text.strip()

    if not store_name:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return

    await state.update_data(store_name=store_name)

    await state.set_state(CreateStoreStates.waiting_plan)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (—á–∏—Å–ª–æ):")


@router.message(CreateStoreStates.waiting_plan)
async def process_store_plan(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–ª–∞–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞"""
    try:
        plan = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    store_name = data.get("store_name")

    async with get_session() as session:
        store_service = StoreService(session)

        existing_store = await store_service.get_by_name(store_name)

        if existing_store:
            await message.answer(
                f"–ú–∞–≥–∞–∑–∏–Ω '{store_name }' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω.",
                reply_markup=get_main_keyboard("admin"),
            )
            await store_service.set_plan(existing_store, plan)
        else:
            store = await store_service.get_or_create(store_name)
            await store_service.set_plan(store, plan)
            await message.answer(
                f"‚úÖ –ù–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω '{store_name }' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –ø–ª–∞–Ω–æ–º {plan }.",
                reply_markup=get_main_keyboard("admin"),
            )

    await state.clear()


@router.message(Command("addmanager"))
async def cmd_add_manager(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""

    await state.clear()
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(CreateManagerStates.waiting_first_name)


@router.message(CreateManagerStates.waiting_first_name)
async def process_manager_first_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    first_name = message.text.strip()

    if not first_name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è:")
        return

    await state.update_data(first_name=first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
    await state.set_state(CreateManagerStates.waiting_last_name)


@router.message(CreateManagerStates.waiting_last_name)
async def process_manager_last_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    last_name = message.text.strip()

    if not last_name:
        await message.answer(
            "–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é:"
        )
        return

    await state.update_data(last_name=last_name)

    async with get_session() as session:
        stores = await StoreService(session).list_stores()

    if not stores:
        await message.answer(
            "‚ö†Ô∏è –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –º–∞–≥–∞–∑–∏–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /addstore.",
            reply_markup=get_main_keyboard("admin"),
        )
        await state.clear()
        return

    kb = ReplyKeyboardBuilder()

    kb.button(text="–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏")

    for store in stores:
        kb.button(text=store.name)
    kb.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏'):",
        reply_markup=kb.as_markup(resize_keyboard=True),
    )
    await state.set_state(CreateManagerStates.waiting_store)


@router.message(CreateManagerStates.waiting_store)
async def process_manager_store(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    data = await state.get_data()
    first_name = data.get("first_name")
    last_name = data.get("last_name")
    store_name = message.text

    store_id = None

    async with get_session() as session:
        user_service = UserService(session)

        existing_user = await user_service.get_by_name(first_name, last_name)

        if existing_user:
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {first_name } {last_name } —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=get_main_keyboard("admin"),
            )
            await state.clear()
            return

        if store_name != "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏":
            store_service = StoreService(session)
            store = await store_service.get_by_name(store_name)
            if store:
                store_id = store.id

        user = await user_service.get_or_create(
            first_name, last_name, "manager", store_id
        )

        store_info = (
            f", –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–∞–≥–∞–∑–∏–Ω—É: {store_name }"
            if store_id
            else ", –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É"
        )
        await message.answer(
            f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä {first_name } {last_name } —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω{store_info }.",
            reply_markup=get_main_keyboard("admin"),
        )

    logger.info(
        f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {first_name } {last_name }, –º–∞–≥–∞–∑–∏–Ω: {store_name }"
    )
    await state.clear()


@router.message(Command("editstore"))
async def cmd_edit_store(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""

    await state.clear()

    async with get_session() as session:
        stores = await StoreService(session).list_stores()

        if not stores:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        kb = ReplyKeyboardBuilder()
        for store in stores:
            kb.button(text=store.name)
        kb.adjust(2)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
        await state.set_state(EditStoreStates.waiting_store)


@router.message(EditStoreStates.waiting_store)
async def process_edit_store_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    store_name = message.text.strip()
    await state.update_data(store_name=store_name)

    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{store_name }':",
        reply_markup=get_edit_store_field_keyboard(),
    )
    await state.set_state(EditStoreStates.waiting_field)


def get_edit_store_field_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω")
    kb.button(text="–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(EditStoreStates.waiting_field)
async def process_edit_store_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = message.text.strip()
    data = await state.get_data()
    store_name = data.get("store_name")

    if field == "–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω":
        async with get_session() as session:
            store_service = StoreService(session)
            store = await store_service.get_by_name(store_name)
            if store:
                await store_service.delete_store(store)
                await message.answer(f"–ú–∞–≥–∞–∑–∏–Ω '{store_name }' —É–¥–∞–ª–µ–Ω.")
            else:
                await message.answer(f"–ú–∞–≥–∞–∑–∏–Ω '{store_name }' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    if field == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ":
        await state.update_data(edit_field="name")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:", reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(EditStoreStates.waiting_value)
    elif field == "–ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω":
        await state.update_data(edit_field="plan")
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ (—á–∏—Å–ª–æ):",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.set_state(EditStoreStates.waiting_value)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return


@router.message(EditStoreStates.waiting_value)
async def process_edit_store_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    store_name = data.get("store_name")
    edit_field = data.get("edit_field")
    new_value = message.text.strip()

    async with get_session() as session:
        store_service = StoreService(session)
        store = await store_service.get_by_name(store_name)

        if not store:
            await message.answer(
                f"–ú–∞–≥–∞–∑–∏–Ω '{store_name }' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_main_keyboard("admin"),
            )
            await state.clear()
            return

        if edit_field == "name":

            existing_store = await store_service.get_by_name(new_value)
            if existing_store and existing_store.id != store.id:
                await message.answer(
                    f"–ú–∞–≥–∞–∑–∏–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_value }' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
                    reply_markup=get_main_keyboard("admin"),
                )
                return

            updated_store = await store_service.update_name(store, new_value)
            await message.answer(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_value }'.",
                reply_markup=get_main_keyboard("admin"),
            )
        elif edit_field == "plan":
            try:
                new_plan = float(new_value.replace(",", "."))
                if new_plan < 0:
                    await message.answer(
                        "–ü–ª–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
                        reply_markup=get_main_keyboard("admin"),
                    )
                    return

                updated_store = await store_service.set_plan(store, new_plan)
                await message.answer(
                    f"‚úÖ –ü–ª–∞–Ω –º–∞–≥–∞–∑–∏–Ω–∞ '{store_name }' –æ–±–Ω–æ–≤–ª—ë–Ω –¥–æ {new_plan }.",
                    reply_markup=get_main_keyboard("admin"),
                )
            except ValueError:
                await message.answer(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.",
                    reply_markup=get_main_keyboard("admin"),
                )
                return

    await state.clear()


@router.message(Command("editmanager"))
async def cmd_edit_manager(message: types.Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    await state.clear()

    async with get_session() as session:
        user_service = UserService(session)
        users = await user_service.get_all_users()

        managers = [u for u in users if u.role == "manager"]

        if not managers:
            await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return

        kb = ReplyKeyboardBuilder()
        for manager in managers:
            kb.button(text=f"{manager .first_name } {manager .last_name }")
        kb.adjust(1)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=kb.as_markup(resize_keyboard=True),
        )
        await state.set_state(EditManagerStates.waiting_manager)


def get_edit_manager_field_keyboard():
    kb = ReplyKeyboardBuilder()
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é")
    kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω")
    kb.button(text="–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=True)


@router.message(EditManagerStates.waiting_manager)
async def process_edit_manager_selection(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    manager_name_raw = message.text.strip()

    parts = manager_name_raw.split(" ", 1)
    if len(parts) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é (—Ñ–∞–º–∏–ª–∏—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤).",
            reply_markup=get_main_keyboard("admin"),
        )
        await state.clear()
        return

    await state.update_data(manager_name=manager_name_raw)
    await state.set_state(EditManagerStates.waiting_field)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '{manager_name_raw }':",
        reply_markup=get_edit_manager_field_keyboard(),
    )


@router.message(EditManagerStates.waiting_field)
async def process_edit_manager_field(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = message.text.strip()
    data = await state.get_data()
    manager_name = data.get("manager_name")

    parts = manager_name.split(" ", 1)
    if len(parts) < 2:
        await message.answer(
            "–û—à–∏–±–∫–∞ –≤ –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard("admin"),
        )
        await state.clear()
        return

    first_name, last_name = parts[0], parts[1]
    logger.info(f"–†–∞–∑–±–æ—Ä –∏–º–µ–Ω–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –∏–º—è='{first_name }', —Ñ–∞–º–∏–ª–∏—è='{last_name }'")

    if field == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
        await state.update_data(
            edit_field="first_name", first_name=first_name, last_name=last_name
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(EditManagerStates.waiting_value)
    elif field == "–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é":
        await state.update_data(
            edit_field="last_name", first_name=first_name, last_name=last_name
        )
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞:", reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(EditManagerStates.waiting_value)
    elif field == "–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω":
        data = await state.get_data()
        full_name = data.get("manager_name", "")
        parts = full_name.split(" ", 1)
        if len(parts) == 2:
            first_name, last_name = parts
            async with get_session() as session:
                user_svc = UserService(session)
                manager = await user_svc.get_by_name_with_store(first_name, last_name)

        await state.update_data(
            edit_field="store", first_name=first_name, last_name=last_name
        )

        async with get_session() as session:
            stores = await StoreService(session).list_stores()

            if not stores:
                await message.answer(
                    "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
                    reply_markup=get_main_keyboard("admin"),
                )
                await state.clear()
                return

            kb = ReplyKeyboardBuilder()

            kb.button(text="–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏")

            for store in stores:
                kb.button(text=store.name)
            kb.adjust(2)

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∏–ª–∏ '–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏'):",
                reply_markup=kb.as_markup(resize_keyboard=True),
            )
            await state.set_state(EditManagerStates.waiting_value)
    elif field == "–£–¥–∞–ª–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞":
        async with get_session() as session:
            user_service = UserService(session)
            manager = await user_service.get_by_name(first_name, last_name)
            if manager:
                await user_service.delete_user(manager)
                await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä '{manager_name }' —É–¥–∞–ª–µ–Ω.")
            else:
                await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä '{manager_name }' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return


@router.message(EditManagerStates.waiting_value)
async def process_edit_manager_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    first_name = data.get("first_name")
    last_name = data.get("last_name")
    edit_field = data.get("edit_field")
    new_value = message.text.strip()

    async with get_session() as session:
        user_service = UserService(session)

        logger.info(f"–ü–æ–∏—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –∏–º—è='{first_name }', —Ñ–∞–º–∏–ª–∏—è='{last_name }'")

        manager = await user_service.get_by_name(first_name, last_name)

        if not manager:
            await message.answer(
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä '{first_name } {last_name }' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏.",
                reply_markup=get_main_keyboard("admin"),
            )
            await state.clear()
            return

        if edit_field == "first_name":
            if not new_value:
                await message.answer(
                    "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è.",
                    reply_markup=get_main_keyboard("admin"),
                )
                return

            updated_manager = await user_service.update_first_name(manager, new_value)
            await message.answer(
                f"‚úÖ –ò–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{first_name }' –Ω–∞ '{new_value }'.",
                reply_markup=get_main_keyboard("admin"),
            )

        elif edit_field == "last_name":
            if not new_value:
                await message.answer(
                    "–§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é.",
                    reply_markup=get_main_keyboard("admin"),
                )
                return

            updated_manager = await user_service.update_last_name(manager, new_value)
            await message.answer(
                f"‚úÖ –§–∞–º–∏–ª–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å '{last_name }' –Ω–∞ '{new_value }'.",
                reply_markup=get_main_keyboard("admin"),
            )

        elif edit_field == "store":
            if new_value == "–ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏":
                updated_manager = await user_service.assign_store(manager, None)
                await message.answer(
                    f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä '{first_name } {last_name }' –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–∞–≥–∞–∑–∏–Ω—É.",
                    reply_markup=get_main_keyboard("admin"),
                )
            else:
                store_service = StoreService(session)
                store = await store_service.get_by_name(new_value)

                if not store:
                    await message.answer(
                        f"–ú–∞–≥–∞–∑–∏–Ω '{new_value }' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        reply_markup=get_main_keyboard("admin"),
                    )
                    await state.clear()
                    return

                updated_manager = await user_service.assign_store(manager, store.id)
                await message.answer(
                    f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä '{first_name } {last_name }' —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –º–∞–≥–∞–∑–∏–Ω—É '{new_value }'.",
                    reply_markup=get_main_keyboard("admin"),
                )

    await state.clear()


@router.message(Command("editrevenue"))
async def cmd_edit_revenue(message: types.Message, state: FSMContext):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã—Ä—É—á–∫–∏ –ª—é–±–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∑–∞ –ª—é–±–æ–π –¥–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if message.chat.id not in ADMIN_CHAT_IDS:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
        )
        return

    await state.clear()

    async with get_session() as session:
        stores = await StoreService(session).list_stores()

    if not stores:
        await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.")
        return

    kb = ReplyKeyboardBuilder()
    for store in stores:
        kb.button(text=store.name)
    kb.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã—Ä—É—á–∫–∏:",
        reply_markup=kb.as_markup(resize_keyboard=True),
    )
    await state.set_state(EditRevenueStates.waiting_store)


@router.message(EditRevenueStates.waiting_store)
async def process_edit_revenue_store(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã—Ä—É—á–∫–∏"""
    store_name = message.text

    async with get_session() as session:
        store_service = StoreService(session)
        store = await store_service.get_by_name(store_name)

        if not store:
            await message.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ.")
            return

    await state.update_data(store_id=store.id, store_name=store_name)

    from aiogram.utils.keyboard import InlineKeyboardBuilder
    import datetime

    kb = InlineKeyboardBuilder()
    today = datetime.date.today()

    for i in range(30):
        date_obj = today - datetime.timedelta(days=i)
        button_text = date_obj.strftime("%d.%m.%Y")
        callback_data = f"editrev_date_{date_obj .isoformat ()}"
        kb.button(text=button_text, callback_data=callback_data)

    kb.adjust(5)

    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã—Ä—É—á–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ {store_name }:",
        reply_markup=kb.as_markup(),
    )
    await state.set_state(EditRevenueStates.waiting_date)


@router.message(EditRevenueStates.waiting_date)
async def process_edit_revenue_date_message(message: types.Message, state: FSMContext):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)"""
    from datetime import datetime

    try:

        date_obj = datetime.strptime(message.text, "%d.%m.%Y").date()
        date_str = date_obj.isoformat()
    except ValueError:
        try:

            date_obj = datetime.fromisoformat(message.text).date()
            date_str = date_obj.isoformat()
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
            return

    await state.update_data(revenue_date=date_str, selected_date=date_str)

    data = await state.get_data()
    store_name = data.get("store_name")
    store_id = data.get("store_id")

    revenue_date = date_obj

    async with get_session() as session:
        revenue_service = RevenueService(session)
        existing_revenue = await revenue_service.get_revenue(store_id, revenue_date)

        if existing_revenue:
            current_amount = existing_revenue.amount
            await message.answer(
                f"–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } –∑–∞ {revenue_date .strftime ('%d.%m.%Y')}: {current_amount }\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏:"
            )
            await state.update_data(revenue_id=existing_revenue.id)
        else:
            await message.answer(
                f"–ó–∞ {revenue_date .strftime ('%d.%m.%Y')} –≤—ã—Ä—É—á–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:"
            )

    await state.set_state(EditRevenueStates.waiting_amount)


@router.callback_query(EditRevenueStates.waiting_date)
async def process_edit_revenue_date(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤—ã—Ä—É—á–∫–∏"""

    date_str = callback.data.replace("editrev_date_", "")

    await state.update_data(revenue_date=date_str, selected_date=date_str)

    data = await state.get_data()
    store_name = data.get("store_name")
    store_id = data.get("store_id")

    from datetime import datetime

    revenue_date = datetime.fromisoformat(date_str).date()

    async with get_session() as session:
        revenue_service = RevenueService(session)
        existing_revenue = await revenue_service.get_revenue(store_id, revenue_date)

        if existing_revenue:
            current_amount = existing_revenue.amount
            await callback.message.answer(
                f"–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } –∑–∞ {revenue_date .strftime ('%d.%m.%Y')}: {current_amount }\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏:"
            )
            await state.update_data(revenue_id=existing_revenue.id)
        else:
            await callback.message.answer(
                f"–ó–∞ {revenue_date .strftime ('%d.%m.%Y')} –≤—ã—Ä—É—á–∫–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã—Ä—É—á–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:"
            )

    await callback.answer()
    await state.set_state(EditRevenueStates.waiting_amount)


@router.message(EditRevenueStates.waiting_amount)
async def process_edit_revenue_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –≤—ã—Ä—É—á–∫–∏"""
    try:
        amount = float(message.text.replace(",", "."))
        if amount < 0:
            await message.answer(
                "–°—É–º–º–∞ –≤—ã—Ä—É—á–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:"
            )
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return

    data = await state.get_data()
    store_id = data.get("store_id")
    store_name = data.get("store_name")
    revenue_date_str = data.get("revenue_date")
    revenue_id = data.get("revenue_id")

    from datetime import datetime

    revenue_date = datetime.fromisoformat(revenue_date_str).date()

    async with get_session() as session:
        revenue_service = RevenueService(session)

        if revenue_id:

            success = await revenue_service.update_revenue(revenue_id, amount)
            action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        else:

            user_service = UserService(session)

            managers = await user_service.get_by_store_id(store_id)
            if managers:
                manager_id = managers[0].id
            else:

                system_manager = await user_service.get_or_create(
                    "–°–∏—Å—Ç–µ–º–∞", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "manager", store_id=store_id
                )
                manager_id = system_manager.id

            revenue = await revenue_service.create_revenue(
                amount, store_id, manager_id, revenue_date
            )
            success = revenue is not None
            action = "—Å–æ–∑–¥–∞–Ω–∞"

        if success:
            logger.info(
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message .from_user .id } {action } –≤—ã—Ä—É—á–∫—É –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } "
                f"–Ω–∞ {revenue_date }: {amount }"
            )

            await message.answer(
                f"‚úÖ –í—ã—Ä—É—á–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } –∑–∞ {revenue_date .strftime ('%d.%m.%Y')} {action }: {amount }",
                reply_markup=get_main_keyboard("admin"),
            )
        else:
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã—Ä—É—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard("admin"),
            )

    await state.clear()
