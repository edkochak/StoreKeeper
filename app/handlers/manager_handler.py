import logging
import datetime
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from app.core.database import get_session
from app.core.states import RevenueStates
from app.services.user_service import UserService
from app.services.store_service import StoreService
from app.services.revenue_service import RevenueService
from app.utils.menu import get_main_keyboard, MANAGER_MENU_TEXT
from app.utils.validators import validate_revenue_amount
from app.utils.date_utils import format_date_for_display

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("revenue"))
async def cmd_revenue(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–≤–æ–¥–∞ –≤—ã—Ä—É—á–∫–∏"""

    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
        return

    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_by_id(user_id)

        if not user:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        if not user.store_id:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return

    today = datetime.date.today()
    dates = [today - datetime.timedelta(days=i) for i in range(8)]

    kb = ReplyKeyboardBuilder()
    for date_obj in dates:
        kb.button(text=date_obj.strftime("%d.%m.%Y"))
    kb.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—ã—Ä—É—á–∫–∏:",
        reply_markup=kb.as_markup(resize_keyboard=True),
    )
    await state.set_state(RevenueStates.waiting_date)


@router.message(RevenueStates.waiting_date)
async def process_revenue_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞ –≤—ã—Ä—É—á–∫–∏"""
    date_str = message.text.strip()

    try:

        date_obj = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()

        today = datetime.date.today()
        if date_obj > today:
            await message.answer(
                "–ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –≤—ã—Ä—É—á–∫—É –∑–∞ –±—É–¥—É—â—É—é –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É."
            )
            return

        await state.update_data(selected_date=date_obj.isoformat())

        data = await state.get_data()
        user_id = data.get("user_id")

        async with get_session() as session:
            user_service = UserService(session)
            user = await user_service.get_by_id(user_id)

            if not user or not user.store_id:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞.",
                    reply_markup=get_main_keyboard("manager"),
                )
                await state.clear()
                return

            store_service = StoreService(session)
            store = await store_service.get_by_id(user.store_id)

            if not store:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞–≥–∞–∑–∏–Ω.",
                    reply_markup=get_main_keyboard("manager"),
                )
                await state.clear()
                return

            revenue_service = RevenueService(session)
            existing_revenue = await revenue_service.get_revenue(
                store.id, date_obj.isoformat()
            )

            message_text = f'–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä—É—á–∫—É –∑–∞ {format_date_for_display (date_obj )} –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "{store .name }":'
            if existing_revenue:
                message_text += f"\n\n–£–∂–µ –≤–≤–µ–¥–µ–Ω–∞ –≤—ã—Ä—É—á–∫–∞: {existing_revenue .amount }. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∏—Ç —Å—Ç–∞—Ä–æ–µ."

            await message.answer(
                message_text,
                reply_markup=types.ReplyKeyboardRemove(),
            )
            await state.set_state(RevenueStates.waiting_amount)

    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
        )


@router.message(RevenueStates.waiting_amount)
async def process_revenue_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—ã—Ä—É—á–∫–∏"""
    amount_str = message.text.strip()

    try:

        amount = validate_revenue_amount(amount_str)

        data = await state.get_data()
        date_str = data.get("selected_date")
        user_id = data.get("user_id")

        if not date_str or not user_id:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–µ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.",
                reply_markup=get_main_keyboard("manager"),
            )
            await state.clear()
            return

        async with get_session() as session:
            user_service = UserService(session)
            user = await user_service.get_by_id(user_id)

            if not user or not user.store_id:
                await message.answer(
                    "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–∞.",
                    reply_markup=get_main_keyboard("manager"),
                )
                await state.clear()
                return

            store_service = StoreService(session)
            store = await store_service.get_by_id(user.store_id)

            revenue_service = RevenueService(session)
            revenue = await revenue_service.add_revenue(store.id, date_str, amount)

            date_obj = datetime.date.fromisoformat(date_str)
            formatted_date = format_date_for_display(date_obj)

            await message.answer(
                f'‚úì –í—ã—Ä—É—á–∫–∞ {amount } –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "{store .name }" –∑–∞ {formatted_date } —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.',
                reply_markup=get_main_keyboard("manager"),
            )
            await state.clear()

    except ValueError as e:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {str (e )}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É."
        )


@router.message(Command("status"))
async def cmd_status(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞"""

    data = await state.get_data()
    user_id = data.get("user_id")

    if not user_id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start")
        return

    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_by_id(user_id)

        if not user:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        if not user.store_id:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            )
            return

        store_service = StoreService(session)
        store = await store_service.get_by_id(user.store_id)

        if not store:
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        revenue_service = RevenueService(session)
        stats = await revenue_service.get_status(store.id)

        if not stats:
            await message.answer(
                f'üìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "{store .name }":\n\n'
                f"–ü–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü: {store .plan }\n"
                f"–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞: 0\n"
                f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: 0%\n\n"
                f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ä—É—á–∫–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.",
                reply_markup=get_main_keyboard("manager"),
            )
            return

        message_text = (
            f'üìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ "{store .name }":\n\n'
            f"–ü–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü: {stats ['plan']}\n"
            f"–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats ['total']}\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats ['percent']}%\n"
        )

        if stats.get("last_date") and stats.get("last_amount"):
            last_date = datetime.date.fromisoformat(stats["last_date"])
            formatted_date = format_date_for_display(last_date)
            message_text += (
                f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–æ–¥: {stats ['last_amount']} ({formatted_date })"
            )

        await message.answer(
            message_text,
            reply_markup=get_main_keyboard("manager"),
        )


@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    await message.answer(
        MANAGER_MENU_TEXT,
        parse_mode="HTML",
        reply_markup=get_main_keyboard("manager"),
    )
