from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import date, timedelta
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from app.core.states import RevenueStates
from app.core.database import get_session
from app.services.store_service import StoreService
from app.services.user_service import UserService
from app.services.revenue_service import RevenueService
from app.utils.menu import get_main_keyboard
from app.utils.validators import validate_date_format, validate_revenue_amount
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("revenue"))
async def cmd_revenue(message: types.Message, state: FSMContext):

    user_data = await state.get_data()
    if not user_data.get("user_id"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    kb = ReplyKeyboardBuilder()
    today = date.today()

    for i in range(8):
        day = today - timedelta(days=i)
        day_str = day.strftime("%d.%m.%Y")
        kb.button(text=day_str)

    kb.adjust(2)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤–≤–æ–¥–∞ –≤—ã—Ä—É—á–∫–∏:",
        reply_markup=kb.as_markup(resize_keyboard=True),
    )
    await state.set_state(RevenueStates.waiting_date)


@router.message(RevenueStates.waiting_date)
async def process_date(message: types.Message, state: FSMContext):
    try:

        selected_date = validate_date_format(message.text)

        if selected_date > date.today():
            await message.answer(
                "–ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å –≤—ã—Ä—É—á–∫—É –∑–∞ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:"
            )
            return

        await state.update_data(selected_date=selected_date.isoformat())

        user_data = await state.get_data()
        user_id = user_data.get("user_id")

        async with get_session() as session:
            user_service = UserService(session)
            user = await user_service.get_by_name(
                user_data.get("first_name", ""), user_data.get("last_name", "")
            )

            if user and user.store_id:

                store_service = StoreService(session)
                store = await store_service.get_by_id(user.store_id)

                if store:
                    await state.update_data(store_id=store.id, store_name=store.name)
                    await message.answer(
                        f"–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä—É—á–∫—É –∑–∞ {message .text } –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store .name }:"
                    )
                    await state.set_state(RevenueStates.waiting_amount)
                    return

            stores = await StoreService(session).list_stores()

        kb = ReplyKeyboardBuilder()
        for store in stores:
            kb.button(text=store.name)
        kb.adjust(2)

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=kb.as_markup(resize_keyboard=True)
        )
        await state.set_state(RevenueStates.waiting_store)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì:")


@router.message(RevenueStates.waiting_store)
async def process_store(message: types.Message, state: FSMContext):
    await state.update_data(store_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä—É—á–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —á–∏—Å–ª–æ–º:")
    await state.set_state(RevenueStates.waiting_amount)


@router.message(RevenueStates.waiting_amount)
async def process_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:

        amount = validate_revenue_amount(message.text)
    except ValueError as e:

        await message.answer(str(e))
        return

    store_name = data.get("store_name")
    selected_date = data.get("selected_date")
    user_id = data.get("user_id")

    if not selected_date:

        logger.warning("–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é")
        selected_date = date.today().isoformat()

    logger.info(
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä—É—á–∫–∏: –º–∞–≥–∞–∑–∏–Ω=%s, –¥–∞—Ç–∞=%s, —Å—É–º–º–∞=%.2f",
        store_name,
        selected_date,
        amount,
    )

    revenue_date = date.fromisoformat(selected_date)

    async with get_session() as session:
        store_service = StoreService(session)
        store = await store_service.get_or_create(store_name)

        revenue_service = RevenueService(session)
        revenue = await revenue_service.create_revenue(
            amount, store.id, user_id, revenue_date
        )

    logger.info(
        "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã—Ä—É—á–∫–∏: –º–∞–≥–∞–∑–∏–Ω=%s, –¥–∞—Ç–∞=%s, —Å—É–º–º–∞=%.2f",
        store_name,
        revenue_date,
        amount,
    )

    await message.answer(
        f"‚úÖ –í—ã—Ä—É—á–∫–∞ {amount } –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store_name } –∑–∞ {revenue_date .strftime ('%d.%m.%Y')} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard(data.get("role")),
    )

    await state.set_state(None)


@router.message(Command("status"))
async def cmd_status(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    user_data = await state.get_data()
    if not user_data.get("user_id"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return

    async with get_session() as session:
        user_service = UserService(session)
        user = await user_service.get_by_name(
            user_data.get("first_name", ""), user_data.get("last_name", "")
        )

        if not user or not user.store_id:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –º–∞–≥–∞–∑–∏–Ω—É.")
            return

        store_service = StoreService(session)
        store = await store_service.get_by_id(user.store_id)

        revenue_service = RevenueService(session)
        current_month_total = await revenue_service.get_month_total(store.id)

        plan_progress = 0
        if store.plan > 0:
            plan_progress = (current_month_total / store.plan) * 100

        await message.answer(
            f"üìä –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {store .name }:\n\n"
            f"–ü–ª–∞–Ω –Ω–∞ –º–µ—Å—è—Ü: {store .plan }\n"
            f"–¢–µ–∫—É—â–∞—è –≤—ã—Ä—É—á–∫–∞: {current_month_total }\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {plan_progress :.1f}%"
        )
